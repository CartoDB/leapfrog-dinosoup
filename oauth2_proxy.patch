diff --git a/providers/carto.go b/providers/carto.go
new file mode 100644
index 0000000..29ee890
--- /dev/null
+++ b/providers/carto.go
@@ -0,0 +1,152 @@
+package providers
+
+import (
+	"encoding/json"
+	"fmt"
+	"io/ioutil"
+	"log"
+	"net/http"
+	"net/url"
+	"errors"
+	"bytes"
+)
+
+type CartoProvider struct {
+	*ProviderData
+	Org  string
+	Team string
+}
+
+func NewCartoProvider(p *ProviderData) *CartoProvider {
+	p.ProviderName = "CARTO"
+	if p.LoginURL == nil || p.LoginURL.String() == "" {
+		p.LoginURL = &url.URL{
+			Scheme: "https",
+			Host:   "team.carto.com",
+			Path:   "/oauth2/authorize",
+		}
+	}
+	if p.RedeemURL == nil || p.RedeemURL.String() == "" {
+		p.RedeemURL = &url.URL{
+			Scheme: "https",
+			Host:   "team.carto.com",
+			Path:   "/oauth2/token",
+		}
+	}
+	// ValidationURL is the API Base URL
+	if p.ValidateURL == nil || p.ValidateURL.String() == "" {
+		p.ValidateURL = &url.URL{
+			Scheme: "https",
+			Host:   "team.carto.com",
+			Path:   "/api/v4/me",
+		}
+	}
+	return &CartoProvider{ProviderData: p}
+}
+func (p *CartoProvider) SetOrgTeam(org, team string) {
+	p.Org = org
+	p.Team = team
+}
+
+func (p *CartoProvider) GetEmailAddress(s *SessionState) (string, error) {
+	return "jtorres@carto.com", nil
+}
+
+func (p *CartoProvider) Redeem(redirectURL, code string) (s *SessionState, err error) {
+	if code == "" {
+		err = errors.New("missing code")
+		return
+	}
+
+	params := url.Values{}
+	params.Add("redirect_uri", redirectURL)
+	params.Add("client_id", p.ClientID)
+	params.Add("client_secret", p.ClientSecret)
+	params.Add("code", code)
+	params.Add("grant_type", "authorization_code")
+	if p.ProtectedResource != nil && p.ProtectedResource.String() != "" {
+		params.Add("resource", p.ProtectedResource.String())
+	}
+
+	var req *http.Request
+	req, err = http.NewRequest("POST", p.RedeemURL.String(), bytes.NewBufferString(params.Encode()))
+	if err != nil {
+		return
+	}
+	req.Header.Set("Content-Type", "application/x-www-form-urlencoded")
+
+	var resp *http.Response
+	resp, err = http.DefaultClient.Do(req)
+	if err != nil {
+		return nil, err
+	}
+	var body []byte
+	body, err = ioutil.ReadAll(resp.Body)
+	resp.Body.Close()
+	if err != nil {
+		return
+	}
+
+	if resp.StatusCode != 200 {
+		err = fmt.Errorf("got %d from %q %s", resp.StatusCode, p.RedeemURL.String(), body)
+		return
+	}
+
+	// blindly try json and x-www-form-urlencoded
+	var jsonResponse struct {
+		AccessToken string `json:"access_token"`
+		UserInfoURL string `json:"user_info_url"`
+	}
+	err = json.Unmarshal(body, &jsonResponse)
+	if err == nil {
+		s = &SessionState{
+			AccessToken: jsonResponse.AccessToken,
+			User: jsonResponse.UserInfoURL,
+		}
+		return
+	}
+	return
+}
+
+func (p *CartoProvider) ValidateSessionState(s *SessionState) bool {
+	var u, _ = p.GetUserName(s)
+	return u != ""
+}
+
+func (p *CartoProvider) GetUserName(s *SessionState) (string, error) {
+	var user struct {
+		Login string `json:"username"`
+		Email string `json:"email"`
+	}
+
+	endpoint := fmt.Sprintf("%s/?api_key=%s", s.User, s.AccessToken)
+
+	req, err := http.NewRequest("GET", endpoint, nil)
+	if err != nil {
+		return "", fmt.Errorf("could not create new GET request: %v", err)
+	}
+
+	resp, err := http.DefaultClient.Do(req)
+	if err != nil {
+		return "", err
+	}
+
+	body, err := ioutil.ReadAll(resp.Body)
+	defer resp.Body.Close()
+	if err != nil {
+		return "", err
+	}
+
+	if resp.StatusCode != 200 {
+		return "", fmt.Errorf("got %d from %q %s",
+			resp.StatusCode, endpoint, body)
+	}
+
+	log.Printf("got %d from %q %s", resp.StatusCode, endpoint, body)
+
+	if err := json.Unmarshal(body, &user); err != nil {
+		return "", fmt.Errorf("%s unmarshaling %s", err, body)
+	}
+
+	return user.Login, nil
+}
diff --git a/providers/providers.go b/providers/providers.go
index 70e707b..4980755 100644
--- a/providers/providers.go
+++ b/providers/providers.go
@@ -31,6 +31,8 @@ func New(provider string, p *ProviderData) Provider {
 		return NewGitLabProvider(p)
 	case "oidc":
 		return NewOIDCProvider(p)
+	case "carto":
+		return NewCartoProvider(p)
 	default:
 		return NewGoogleProvider(p)
 	}
